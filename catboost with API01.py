# -*- coding: utf-8 -*-
"""Catboost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MIAezih_bx2J277wIdXUsxDP1gj0byrH

# **Import Liabrary**
"""

# import library
import pandas as pd
from sklearn import metrics
from sklearn import preprocessing
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

"""# **Import Datasets**"""

from google.colab import drive
drive.mount('/content/drive')

# โหลดไฟล์จาก Google Drive
file_path = '/content/drive/MyDrive/Balanced_Mental_Health_and_Work.csv'  # เปลี่ยนพาธให้ถูกต้อง
df = pd.read_csv(file_path)

# ตรวจสอบข้อมูล
print(df.head())  # ดู 5 แถวแรกของข้อมูล

"""# **Result from Model**"""

# ✅ Import Libraries
import subprocess
import sys

# ติดตั้ง dependencies ที่จำเป็น
subprocess.check_call([sys.executable, "-m", "pip", "install", "numpy"])
subprocess.check_call([sys.executable, "-m", "pip", "install", "catboost"])

# โค้ดหลักของแอป Streamlit
import streamlit as st
import numpy as np
from catboost import CatBoostClassifier

import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# ✅ โหลดข้อมูล
from google.colab import drive
drive.mount('/content/drive')

# โหลดไฟล์จาก Google Drive
file_path = '/content/drive/MyDrive/Balanced_Mental_Health_and_Work.csv'  # เปลี่ยนพาธให้ถูกต้อง
df = pd.read_csv(file_path)

# ✅ กำหนด Features และ Target
X = df[['Occupation', 'treatment' ,'Growing_Stress', 'Mental_Health_History','Social_Weakness','Gender','Days_Indoors']]
y = df['Work_Interest']  # ต้องใช้เป็น Series

# ✅ หา Categorical Features
cat_features = ['Occupation', 'treatment' ,'Growing_Stress', 'Mental_Health_History','Social_Weakness','Gender','Days_Indoors']

# ✅ แบ่ง Train-Test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ✅ สร้างและเทรนโมเดล CatBoost
model = CatBoostClassifier(iterations=500, learning_rate=0.1, depth=6, cat_features=cat_features, verbose=100)
model.fit(X_train, y_train)

# ✅ ทำนายผล
y_pred = model.predict(X_test)

# ✅ ประเมินโมเดล
acc = accuracy_score(y_test, y_pred)
print(f"Accuracy: {acc:.4f}")
print("Classification Report:\n", classification_report(y_test, y_pred,digits=4))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

import joblib

# บันทึกโมเดลลงไฟล์
joblib.dump(model, 'work_interest_classification.pkl')

pip install streamlit

import streamlit as st
import joblib
import pandas as pd

# โหลดโมเดล
model = joblib.load('/content/work_interest_classification.pkl')

# สร้าง UI ให้ผู้ใช้กรอกข้อมูล
st.title('Work Interest Classification')
occupation = st.selectbox('Occupation', ['Housewife', 'Business', 'Corporate', 'Student', 'Other'])
treatment = st.selectbox('Treatment', ['Has treated', 'Has treated'])
growing_stress = st.selectbox('Growing Stress',['Has increased', 'Has not increased'])
mental_health_history = st.selectbox('Mental Health History', ['Has a mental history', 'No mental history'])
social_weakness = st.selectbox('Social Weakness', ['Not lack confidence', 'Lack confidence'])
gender = st.selectbox('Gender', ['Male', 'Female'])

# แก้ไขส่วนของ st.slider ให้ถูกต้อง
days_indoors_options = ['1-14 days', '15-30 days', '31-60 days', 'More than 2 months', 'Go out every days']
days_indoors_index = st.slider('Days Indoors', 0, len(days_indoors_options) - 1, 0)  # ใช้ index แทนค่า string
days_indoors = days_indoors_options[days_indoors_index] # ดึงค่า string จาก index ที่เลือก

# สร้าง DataFrame จากข้อมูลที่ผู้ใช้กรอก
user_input = pd.DataFrame({
    'Occupation': [occupation],
    'treatment': [treatment],
    'Growing_Stress': [growing_stress],
    'Mental_Health_History': [mental_health_history],
    'Social_Weakness': [social_weakness],
    'Gender': [gender],
    'Days_Indoors': [days_indoors] # ใช้ค่า string ที่ถูกต้อง
})

# ทำนายผล
prediction = model.predict(user_input)

# แสดงผลลัพธ์
st.write(f'Prediction: {prediction[0]}')

!streamlit run catboost.py